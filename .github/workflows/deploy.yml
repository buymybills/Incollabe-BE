name: Deploy

on:
  workflow_call:
    inputs:
      service:
        description: 'Service name (api-gateway, quickpick, product-service, incollab)'
        required: true
        type: string
      environment:
        description: 'Deployment environment (dev, staging, production)'
        required: false
        type: string
        default: 'production'
      docker_compose_path:
        description: 'Path to docker-compose repo on server'
        required: false
        type: string
        default: '/home/ubuntu/Incollabe-BE'
      image_tag:
        description: 'Docker image tag (latest, dev, etc.)'
        required: false
        type: string
        default: 'latest'
    secrets:
      EC2_HOST:
        required: true
      EC2_USER:
        required: true
      EC2_SSH_KEY:
        required: true
      DOCKERHUB_USERNAME:
        required: true

jobs:
  deploy:
    name: Deploy ${{ inputs.service }} to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repo (not used directly, but required by Actions)
        uses: actions/checkout@v4

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          script: |
            echo "üöÄ Starting deployment of ${{ inputs.service }} to ${{ inputs.environment }}..."
            cd ${{ inputs.docker_compose_path }}

            # Ensure deploy.sh is executable
            chmod +x deploy.sh

            # Ensure .env file exists and has required values
            if [ ! -f .env ]; then
              echo "Creating .env file..."
              cat > .env << EOF
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            IMAGE_TAG=${{ inputs.image_tag }}
            EOF
            else
              # Update DOCKERHUB_USERNAME
              if grep -q "DOCKERHUB_USERNAME" .env; then
                sed -i "s/^DOCKERHUB_USERNAME=.*/DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}/" .env
              else
                echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
              fi

              # Update IMAGE_TAG
              if grep -q "IMAGE_TAG" .env; then
                sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${{ inputs.image_tag }}/" .env
              else
                echo "IMAGE_TAG=${{ inputs.image_tag }}" >> .env
              fi
            fi

            # Run deployment script
            ./deploy.sh deploy

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ inputs.docker_compose_path }}
            echo "üîç Performing health check for ${{ inputs.service }}..."

            case "${{ inputs.service }}" in
              "incollab")
                timeout 30 bash -c 'until curl -f http://localhost/api; do sleep 2; done' || echo "Health check failed"
                ;;
              *)
                echo "No specific health check configured for ${{ inputs.service }}."
                if docker-compose ps ${{ inputs.service }} | grep -q "Up"; then
                  echo "‚úÖ Container is running successfully"
                else
                  echo "‚ùå Container check failed"
                  exit 1
                fi
                ;;
            esac
